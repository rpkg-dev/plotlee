% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotlee.gen.R
\name{write_img}
\alias{write_img}
\title{Save Plotly charts as static images}
\usage{
write_img(
  plots,
  dir = ".",
  formats = "pdf",
  width = NULL,
  height = NULL,
  scale = NULL,
  responsive = TRUE,
  crop = TRUE,
  padding = c(0L, 10L, 0L, 10L),
  show_progress = TRUE
)
}
\arguments{
\item{plots}{Charts to export. A named list of \link[plotly:plot_ly]{plotly objects}. Names are used as output filenames (excl. filetype extension).}

\item{dir}{Path to the directory of the exported files. A character scalar.}

\item{formats}{Additional image file formats to export to besides the default SVG format. Zero or more of
\code{"png"}, \code{"webp"}, \code{"pdf"}, \code{"eps"} and \code{"ps"}.}

\item{width}{Width of the exported image in layout pixels. If \code{scale} is 1, this will also be the width of the exported image in physical pixels. A numeric
vector that is recycled to the length of \code{plots}, or \code{NULL}.}

\item{height}{Height of the exported image in layout pixels. If \code{scale} is 1, this will also be the height of the exported image in physical pixels. A
numeric vector that is recycled to the length of \code{plots}, or \code{NULL}.}

\item{scale}{Scale factor to use when exporting the figure. A scale factor larger than \code{1.0} will increase the image resolution with respect to the figure's
layout pixel dimensions. Whereas as scale factor of less than 1.0 will decrease the image resolution. A numeric vector that is recycled to the length of
\code{plots}, or \code{NULL}.}

\item{responsive}{Whether or not to modify the SVG image to become responsive when inlined into HTML by setting its \code{width} and \code{height} property to
\code{"100\%"}.A logical vector, recycled to the length of \code{plots}.}

\item{crop}{Whether or not to crop unused space around the generated image. Note that this has no effect on \code{formats = c("eps", "ps")} – EPS images are
always cropped while cropping PS images is not supported. A logical vector, recycled to the length of \code{plots}.}

\item{padding}{Padding to leave after cropping unused space around the generated image. Either a single numeric vector, or a list of numeric vectors. Each
vector must be of length 1–4:
\itemize{
\item When one value is specified, it applies the same padding to all four sides.
\item When two values are specified, the first padding applies to the top and bottom, the second to the left and right.
\item When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom.
\item When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise).
}

For \code{formats = "pdf"}, the values are in \href{https://en.wikibooks.org/wiki/LaTeX/Lengths#Units}{\code{bp}} ("big points"), for all other formats in pixels. Only
relevant if \code{crop = TRUE}. Note that \code{padding} has no effect on \code{formats = "eps"}, i.e. EPS images are always fully cropped.}

\item{show_progress}{Whether or not to output progress indication.}
}
\value{
The paths to the generated SVG files, invisibly.
}
\description{
Writes Plotly charts to static image files in SVG and optionally additional formats (EPS, PDF, PNG, PS, and/or WebP) using \code{\link[plotly:save_image]{plotly::kaleido()}}.

In contrast to \code{\link[plotly:save_image]{plotly::save_image()}}, this function
\itemize{
\item allows to export multiple \link[plotly:plot_ly]{plotly objects} in a single kaleido session to multiple output formats in one go.
\item allows to tweak the exported SVG images to be responsive.
\item allows to crop unused space around the exported images.
\item allows to add padding around the exported images.
}
}
\details{
PNG and WebP images are completely based on the resulting SVG image, while EPS, PDF and PS are built from an intermediate SVG representation (before
viewbox-based SVG cropping is applied). Hence, results of the different output formats might differ.

It's recommended to rely on SVG images wherever possible and fall back to PDF images where necessary (e.g. in LaTeX documents) since these two vector image
formats provide the best visual results. EPS and PS images should be avoided if possible due to their shortcomings in cropping and padding.
}
\examples{
\dontrun{
plotly::plot_ly(data = mtcars,
                type = "scatter",
                mode = "markers",
                x = ~mpg,
                y = ~hp) |>
  list("mtcars_mpg_by_hp" = _) |>
  plotlee::write_img(formats = c("pdf", "png"))}
}
